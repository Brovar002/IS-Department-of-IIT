//
agent_of_counting_people_in_rank
// Множество идентификаторов
	=> nrel_main_idtf:
	[агентная scp-программа подсчета количества персон в звании] (* <- lang_ru;;
										*);
[agent scp-program of counting people in rank] (* <- lang_en;; *);
<- agent_scp_program;;
// Указываем, что операция поиска агента является scp-программой
scp_program -> agent_of_counting_people_in_rank
(*
// Множество параметров агентной операции
-> rrel_params: .agent_of_counting_people_in_rank
	(*
	-> rrel_1: rrel_in: _event;;
	-> rrel_2: rrel_in: _input_arc;;
	*);;
// Множество операторов агентной операции
-> rrel_operators: .agent_of_counting_people_in_rank_operator_set
(*
// Первый исполняемый оператор операции
	-> rrel_init: .agent_of_counting_people_in_rank_operator1A
	(*
	<- searchElStr3;;
	-> rrel_1: rrel_assign: rrel_scp_var: _temp;;
	-> rrel_2: rrel_fixed: rrel_scp_var: _input_arc;;
	-> rrel_3: rrel_assign: rrel_scp_var: _quest;;
	=> nrel_goto: .agent_of_counting_people_in_rank_operator1B;;
	*);;
// В rrel_1 устанавливаем имя придуманного нами вопроса
// Агент будет просыпаться, когда обнаружит наш вопрос.
-> .agent_of_counting_people_in_rank_operator1B
	(*
	<- searchElStr3;;
	-> rrel_1: rrel_fixed: rrel_scp_const: question_of_counting_people_in_rank;;
	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
	-> rrel_3: rrel_fixed: rrel_scp_var: _quest;;
	=> nrel_then: .agent_of_counting_people_in_rank_operator1C;;
	=> nrel_else: .agent_of_finding_illustrations_operator_return;;
	*);;
// Найдём параметры операции – их подал на вход сам пользователь
-> .agent_of_counting_people_in_rank_operator1C
	(*
	<- searchElStr3;;
	-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
	-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
	-> rrel_3: rrel_assign: rrel_scp_var: _param;;

	=> nrel_then: .agent_of_counting_people_in_rank_operator1D;;
	=> nrel_else: .agent_of_finding_illustrations_operator_return;;
	*);;
// Сгенерировать узел, в который мы поместим конструкцию ответа var fixer : [значение]
-> .agent_of_counting_people_in_rank_operator1D
	(*
		<- genEl;;
		-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _answer;;
		=> nrel_goto: .agent_of_counting_people_in_rank_operator1E;;
		*);;


-> .agent_of_counting_people_in_rank_operator1E
	(*
		<- searchSetStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
		-> rrel_2: rrel_assign: rrel_const: rrel_pos_const_perm: rrel_scp_var: _arc_author_1;;
		-> rrel_3: rrel_assign: rrel_scp_var: _pers;;
		-> rrel_set_3: rrel_assign: rrel_scp_var: _set_of_persons;;
		=> nrel_then: .agent_of_counting_people_in_rank_operator1FF;;
		=> nrel_else: .agent_of_counting_people_in_rank_operator_gen_answer;;
	*);;



-> .agent_of_counting_people_in_rank_operator1FF
	(*
		<- printEl;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _set_of_persons;;
		=> nrel_goto: .agent_of_counting_people_in_rank_operator1F;;
		*);;



-> .agent_of_counting_people_in_rank_operator1F
	(*
		<- contAssign;;
		-> rrel_1: rrel_assign: rrel_scp_var: _increment;;
		-> rrel_2: rrel_fixed: rrel_scp_const: [0];;
		=> nrel_goto: .agent_of_counting_people_in_rank_operator2F;;
		*);;

-> .agent_of_counting_people_in_rank_operator2F
	(*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _set_of_persons;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc_set_persons;;
		-> rrel_3: rrel_assign: rrel_scp_var: _delete_person;;
		=> nrel_then: .agent_of_counting_people_in_rank_operator1H;;
		=> nrel_else: .agent_of_counting_people_in_rank_operator1K;;
	*);;

-> .agent_of_counting_people_in_rank_operator1H
	(*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_pos_const_perm: rrel_scp_var: _arc_set_persons;;
		=> nrel_goto: .agent_of_counting_people_in_rank_operator1J;;
	*);;


-> .agent_of_counting_people_in_rank_operator1J
	(*
		<- contAdd;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _increment;;
		-> rrel_2: rrel_fixed: rrel_scp_var: _increment;;
		-> rrel_3: rrel_fixed: rrel_scp_const: [1];;
		=> nrel_goto: .agent_of_counting_people_in_rank_operator2F;;
	*);;


-> .agent_of_counting_people_in_rank_operator1K
	(*
		<- genElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
		-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _increment;;
		-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: nrel_count_persons;;

		=> nrel_goto: .agent_of_counting_people_in_rank_operator3A;;

		
	*);;

-> .agent_of_counting_people_in_rank_operator3A
	(*
		<- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
		-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _increment;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: nrel_count_persons;;

		-> rrel_set_2: rrel_fixed: rrel_scp_var: _answer;;
		-> rrel_set_4: rrel_fixed: rrel_scp_var: _answer;;

		=> nrel_goto: .agent_of_counting_people_in_rank_operator3B;;
		
	*);;




-> .agent_of_counting_people_in_rank_operator3B
	(*
		<- genElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _answer;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _param;;
		=> nrel_goto: .agent_of_counting_people_in_rank_operator3C;;
	*);;

-> .agent_of_counting_people_in_rank_operator3C
	(*
		<- genElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _answer;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _increment;;
		=> nrel_goto: .agent_of_counting_people_in_rank_operator3D;;
	*);;

-> .agent_of_counting_people_in_rank_operator3D
	(*
		<- genElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _answer;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_const: nrel_count_persons;;

		=> nrel_goto: .agent_of_counting_people_in_rankoperator_gen_answerB;;
	*);;



-> .agent_of_counting_people_in_rankoperator_gen_answerB
	(*
		<- printEl;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _answer;;

		=> nrel_goto: .agent_of_counting_people_in_rank_operator_gen_answer;;
	*);;

// Добавляем узел с конструкцией ответа
-> .agent_of_counting_people_in_rank_operator_gen_answer
	(*
		<- genElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
		-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _answer;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: nrel_answer;;
		=> nrel_goto: .agent_of_finding_illustrations_operator_return;;
	*);;
// Оператор завершения агентной операции
-> .agent_of_finding_illustrations_operator_return
	(*
		<- return;;
	*);;
*);;
*);;
